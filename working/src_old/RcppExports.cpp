// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// add_noise
NumericMatrix add_noise(const NumericMatrix& x, const NumericVector& weights, const std::string& kernel, const NumericVector& bandwidth, const bool& preserve_var);
RcppExport SEXP kernelboot_add_noise(SEXP xSEXP, SEXP weightsSEXP, SEXP kernelSEXP, SEXP bandwidthSEXP, SEXP preserve_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const bool& >::type preserve_var(preserve_varSEXP);
    rcpp_result_gen = Rcpp::wrap(add_noise(x, weights, kernel, bandwidth, preserve_var));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dmvn
arma::vec cpp_dmvn(arma::mat x, arma::rowvec mu, arma::mat sigma, bool log_prob);
RcppExport SEXP kernelboot_cpp_dmvn(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dmvn(x, mu, sigma, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rmvn
arma::mat cpp_rmvn(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP kernelboot_cpp_rmvn(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rmvn(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ruvkern
NumericVector cpp_ruvkern(int n, const NumericVector& data, const NumericVector& weights, const std::string& kernel, double bw, bool preserve_var);
RcppExport SEXP kernelboot_cpp_ruvkern(SEXP nSEXP, SEXP dataSEXP, SEXP weightsSEXP, SEXP kernelSEXP, SEXP bwSEXP, SEXP preserve_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< bool >::type preserve_var(preserve_varSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ruvkern(n, data, weights, kernel, bw, preserve_var));
    return rcpp_result_gen;
END_RCPP
}
// cpp_duvkern
NumericVector cpp_duvkern(const NumericVector& x, const NumericVector& data, const NumericVector& weights, const std::string& kernel, double bw, bool log_prob);
RcppExport SEXP kernelboot_cpp_duvkern(SEXP xSEXP, SEXP dataSEXP, SEXP weightsSEXP, SEXP kernelSEXP, SEXP bwSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_duvkern(x, data, weights, kernel, bw, log_prob));
    return rcpp_result_gen;
END_RCPP
}
