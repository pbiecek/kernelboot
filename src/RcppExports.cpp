// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_dmvkd
Rcpp::List cpp_dmvkd(const arma::mat& x, const arma::mat& y, const arma::mat& bandwidth, const arma::vec& weights, const bool& log_prob, const bool& is_chol);
RcppExport SEXP kernelboot_cpp_dmvkd(SEXP xSEXP, SEXP ySEXP, SEXP bandwidthSEXP, SEXP weightsSEXP, SEXP log_probSEXP, SEXP is_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_prob(log_probSEXP);
    Rcpp::traits::input_parameter< const bool& >::type is_chol(is_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dmvkd(x, y, bandwidth, weights, log_prob, is_chol));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rmvkd
Rcpp::List cpp_rmvkd(const unsigned int& n, const arma::mat& y, const arma::mat& bandwidth, const arma::vec& weights, const bool& is_chol);
RcppExport SEXP kernelboot_cpp_rmvkd(SEXP nSEXP, SEXP ySEXP, SEXP bandwidthSEXP, SEXP weightsSEXP, SEXP is_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type is_chol(is_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rmvkd(n, y, bandwidth, weights, is_chol));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dmvn
arma::vec cpp_dmvn(const arma::mat& x, const arma::rowvec& mu, const arma::mat& sigma, const bool& log_prob);
RcppExport SEXP kernelboot_cpp_dmvn(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dmvn(x, mu, sigma, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rmvn
arma::mat cpp_rmvn(const unsigned int& n, const arma::vec& mu, const arma::mat& sigma);
RcppExport SEXP kernelboot_cpp_rmvn(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rmvn(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// cpp_duvkd
Rcpp::List cpp_duvkd(const arma::vec& x, const arma::vec& y, const double& bandwidth, const arma::vec& weights, const std::string& kernel, const bool& log_prob);
RcppExport SEXP kernelboot_cpp_duvkd(SEXP xSEXP, SEXP ySEXP, SEXP bandwidthSEXP, SEXP weightsSEXP, SEXP kernelSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_duvkd(x, y, bandwidth, weights, kernel, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ruvkd
Rcpp::List cpp_ruvkd(const unsigned int& n, const arma::vec& y, const double& bandwidth, const arma::vec& weights, const std::string& kernel, const bool& preserve_var);
RcppExport SEXP kernelboot_cpp_ruvkd(SEXP nSEXP, SEXP ySEXP, SEXP bandwidthSEXP, SEXP weightsSEXP, SEXP kernelSEXP, SEXP preserve_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const bool& >::type preserve_var(preserve_varSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ruvkd(n, y, bandwidth, weights, kernel, preserve_var));
    return rcpp_result_gen;
END_RCPP
}
